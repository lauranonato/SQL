#para cada usuario, qual e quando foi a primeira compra?
select
  customer_id,
  created_at,
  first_value(created_at) over(partition by customer_id order by created_at asc) as primeira_compra
from e_commerce.orders
where status = 'entregue'
order by 1,2

#quantos dias se passaram da primeira compra ate o campo x?
select
  customer_id,
  created_at,
  first_value(created_at) over(partition by customer_id order by created_at asc) as primeira_compra,
  timestamp_diff(created_at, first_value(created_at) over(partition by customer_id order by created_at asc), day) as dias_apos_primeira_compra
from e_commerce.orders
where status = 'entregue'
order by 1,2;

##first_value(created_at) over(partition by customer_id order by created_at asc) as primeira_compra: primeiro passa a funçao(coloca o valor) e depois o over(), o partition by nem sempre é obrigatorio

#last_value
select
  customer_id,
  created_at,
  last_value(created_at) over(partition by customer_id order by created_at
    rows between unbounded preceding and unbounded following) as ultima_compra,
from e_commerce.orders
where status = 'entregue'
order by 1,2;

#lead = traz o registro subsequente, ou seja, o proximo valor
select
  customer_id,
  created_at,
  lead(created_at) over(partition by customer_id order by created_at asc) as data_compra_seguinte,
from e_commerce.orders
where status = 'entregue'
order by 1,2;

#com o ex2
select
  customer_id,
  created_at,
  lead(created_at) over(partition by customer_id order by created_at asc) as data_compra_seguinte,
  timestamp_diff(created_at, first_value(created_at) over(partition by customer_id order by created_at asc), day) as dias_apos_primeira_compra
from e_commerce.orders
where status = 'entregue'
order by 1,2;

#util para analisar um historico, mais simples do q fazer uma subquery... ou varios joins

#lag
#retorna o anterior
select
  customer_id,
  created_at,
  lag(created_at) over(partition by customer_id order by created_at asc) as data_compra_anterior
from e_commerce.orders
where status = 'entregue'
order by 1,2;

#quais os dias em diferença de uma compra em relação a outra? isso para cada um dos registros
select
  customer_id,
  created_at,
  lag(created_at) over(partition by customer_id order by created_at asc) as data_compra_anterior,
  timestamp_diff(created_at, lag(created_at) over(partition by customer_id order by created_at asc),day) as dias_desde_compra_anterior
from e_commerce.orders
where status = 'entregue'
order by 1,2;

#qual o tempo medio entre uma compra e outra?
select customer_id, round(avg(dias_desde_compra_anterior),2) as tempo_medio_entre_uma_compra_e_outra
from (select
  customer_id,
  created_at,
  lag(created_at) over(partition by customer_id order by created_at asc) as data_compra_anterior,
  timestamp_diff(created_at, lag(created_at) over(partition by customer_id order by created_at asc),day) as dias_desde_compra_anterior
from e_commerce.orders
where status = 'entregue'
order by 1,2)
group by customer_id
order by customer_id;

#outras estatisticas 
select customer_id, 
  round(avg(dias_desde_compra_anterior),2) as tempo_medio_entre_uma_compra_e_outra,
  min(dias_desde_compra_anterior) as minimo_entre_uma_compra_e_outra,
  max(dias_desde_compra_anterior) as maximo_entre_uma_compra_e_outra
from (select
  customer_id,
  created_at,
  lag(created_at) over(partition by customer_id order by created_at asc) as data_compra_anterior,
  timestamp_diff(created_at, lag(created_at) over(partition by customer_id order by created_at asc),day) as dias_desde_compra_anterior
from e_commerce.orders
where status = 'entregue'
order by 1,2)
group by customer_id;

#rank: faz um ranqueamento 
select 
  customer_id,
  created_at,
  rank() over(partition by customer_id order by created_at) as ranking
from e_commerce.orders
where status = 'entregue'
order by 1,2;

#row_number faz uma classificação
select
  category_id,
  rank() over(order by category_id) as rank,
  row_number() over(order by category_id) as numero_linha
from e_commerce.products;

#exemplos com função de agregação juntamente com funções de janela
select
  customer_id,
  created_at,
  min(created_at) over(partition by customer_id) as primeira_compra,
  max(created_at) over(partition by customer_id) as ultima_compra,
  count(created_at) over(partition by customer_id) as num_compras
from e_commerce.orders
where status = 'entregue'
order by 1,2